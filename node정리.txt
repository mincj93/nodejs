------------------------------------------------------------------------------------
Node
    Node는 서버가 아니다.
    Javascript 엔진으로 빌드된 Javascript runtime 이다.
    Javascript 로 만든 프로그램들을 실행할 수 있게 해준다.

이벤트 기반으로 작동한다.
    ex) 클릭, 네트워크 요청, 타이머
콜백함수를 사용함.

runtime
    실행환경 이라고 보면 된다. (== 가상머신, 실행기)
    ex) Chrome, Edge, Safari, Fire Fox 등등
------------------------------------------------------------------------------------
호출스택
    Last In, First Out 으로 실행됨
    실행되면 가장 먼저 anonymous 라는 가상의 전역 컨텍스트가 호출 스택에 쌓인다.
    그 이후에 호출되는 함수들이 쌓여서 가장 나중에 쌓인 함수부터 역순으로 실행된다.

------------------------------------------------------------------------------------
변수선언 키워드
가장 큰 차이점은 스코프(적용되는 범위)이다.

1. var
    함수 스코프
    웬만하면 쓰지말자.(ES6 는 var키워드 쓰지 않음)
    function a(){
        var y=3;
    }
    console.log(y); // 에러가 난다. var는 함수스코프이기에 변수 y는 함수 a() 밖에서 쓸 수 없음

2. const
    블록 스코프
    if(true){
        const x=3;
    }
    console.log(x); // 에러가 난다. 블록( { } )을 빠져나오지 못하기 때문.

※ const 를 상수로 생각해서 아예 고칠 수 없다고 생각하면 안된다! JSON형식으로 된 것은 고치기 가능
    ex1)
        const a=3;
        a=5;    // 에러
    
    ex2)
        const b = {name : 'mcj'};
        b.name = 'mincj93'; // 정상작동


3. let
    블록스코프이다. 
    일반적인 변수로 쓸 때 사용.
    같은 변수명으로 2개 이상의 변수를 선언할 수 없다. (var 는 중복선언가능.)

    ex1)
        let foo = 123; // 전역 변수

        {
            let foo = 456; // 지역 변수
            let bar = 456; // 지역 변수
        }

        console.log(foo); // 123
        console.log(bar); // ReferenceError: bar is not defined

------------------------------------------------------------------------------------
백틱 (`)
let won = 1000;
let str = `이 과자는 ${won}원 입니다.`;

str 을 출력하면 "이 과자는 1000원 입니다." 로 출력된다.

------------------------------------------------------------------------------------
화살표함수
    function 키워드를 완벽하게 대체하지 않는다. (this 키워드의 스코프 때문임.)
    this 키워드를 사용하는 함수라면 기존 function 키워드를 그대로 사용하여 함수를 쓰고,
    this 키워드를 안 쓰면 화살표함수로 쓰면 된다.

사용방법
    기존 함수
    function add1(x,y){
        return x+y; 
    }

    화살표함수로 변환
    const add1 = (x,y) =>{
        return x+y;
    }


------------------------------------------------------------------------------------
구조분해
    this가 있으면 구조분해 하지 말아라.
＊module 폴더 참고＊

------------------------------------------------------------------------------------
★★★ promise, async/await

promise
    내용은 실행되었지만 결과를 반환하지 않은 객체
    .then 을 붙이면 결과를 반환한다.
    실행이 완료되지 않았으면 완료된 뒤에 then 내부 함수가 실행됨
    Resolve == 성공시 리턴값이 저장되어 then 으로 연결된다.
    Reject == 실패시 리턴값이 저장되어 catch로 연결된다.
    Finally 부분은 무조건 실행된다.


------------------------------------------------------------------------------------
__filename
    현재 파일의 경로 + 파일명 값을 준다

__dirname
    현재 폴더의 경로 값을 준다

path
    Window 와 Mac 의 주소처리 하는 슬래쉬가 다른데, 그 주소처리를 일정하게 해준다. 
    
    path.join(__dirname, 'var.js');
    이렇게 쓰면 "현재폴더의 경로/var.js" 를 주소값으로 준다.
    ex) /nodejs-book/lecture/var.js

    path.join(__dirname, '..' ,'var.js');
    중간에 .. 은 상위폴더를 의미하므로
    "현재폴더의 경로의 상위폴더/var.js" 를 주소값으로 준다.
    ex) /nodejs-book/var.js
------------------------------------------------------------------------------------