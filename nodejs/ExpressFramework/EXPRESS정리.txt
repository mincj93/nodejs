Express

주소 요청시 기본적으로 REST 방식 요청을 지정함.
ex) 
app.get('url', (callback 함수) =>{
    작업
});

app.post('url', (callback 함수) =>{
    작업
});

app.patch('url', (callback 함수) =>{
    작업
});

app.set
    전역변수를 설정해주는 것.
    ex) app.set('myVal', 213); // 전역변수 myVal 에 213 값을 넣음.

Router 라우터
    메소드와 주소가 있는 것들을 말한다.
    app.get('/cat/user', (req,res) =>{
            console.log('user');
    });

미들웨어
    - 공통미들웨어
        모든 요청에서 공통적으로 실행되는 미들웨어를 말함.
        공통 미들웨어는 꼭 next를 써주자.
        app.use((req,res, next) =>{
            console.log('모든 요청에서 실행한다.');
            next();
        });

    - next();
        공통미들웨어를 실행하고 next를 안 쓰면 공통미들웨어 부분에서 코드가 멈춘다.
        공통미들웨어에서 next 를 3번째 인자로 꼭 써주고 next(); 도 써주자.
        next(); 를 함수 내에서 사용해주면 그 이후에 라우터를 찾아간다.
        ※원래는 일반 라우터에도 next가 있지만 생략되어있는 것임.
    
    - next(매개변수);
        매개변수가 들어간 next(a) 는 에러미들웨어로 바로 넘어가게 해준다.
        예시)
        app.use((req,res, next) =>{
            console.log('모든 요청에서 실행한다.');
            next();
        },(req,res, next) =>{
            try {
                console.log('catch 부분에 가게 에러를 내본다.');
                console.log(val);
            } catch (error) {
                console.log('에러미들웨어로 이동한다. 에러처리를 한 것임.');
                next(error);
            }
        });
    
    - next('route');
        에러처리 next(매개변수) 와는 다른 것이다.
        라우트 체이닝이 되어있을 때, next('route'); 를 써주면 나머지 체이닝된 미들웨어를 생략하고 다음 라우터를 찾아간다.
        ex)
        http://localhost:3000/ 를 요청했을 때

        app.get('/', (req,res) =>{
            console.log('실행.');
            next('route');
        }, (req,res) =>{
            console.log('next('route'); 때문에 실행하지 못한다.');
        });

        app.get('/', (req,res) =>{
            console.log('동일한 주소');
            console.log('요기서 실행되지롱');
        }

    - 공통미들웨어 연결하기
        app.use((req,res, next) =>{
            console.log('모든 요청에서 실행한다. 1');
            next();
        },(req,res, next) =>{
            console.log('모든 요청에서 실행한다. 2');
            next();
        },(req,res, next) =>{
            console.log('모든 요청에서 실행한다. 3');
            next();
        });

    - 특정 주소에서만 실행되는 미들웨어 만들기
        app.use('/about', (req,res, next) =>{
            console.log('요청주소가 /about 으로 될 때만 실행한다.');
            next();
        });

    - 에러미들웨어
        반드시 4개의 매개변수(err, req, res, next)가 모두 있어야 한다.

        app.use((err, req, res, next) =>{
            console.log('에러미들웨어이다.');
            console.log(err);
            res.send('에러났습니당~');
        });

        에러미들웨어는 라우터들의 가장 아래부분에 만들어준다.

route parameter(라우트 매개변수. 일명 와일드카드)
        주소에 변수를 넣는것.
        app.get('/cat/:name', (req,res) =>{
            console.log(req.params.name);
            console.log(`찍어봄 = ${req.params.name}`);
        });
        주소창에 http://localhost:3000/cat/mcj 이런식으로 넣으면
        값 mcj 가 name 이라는 변수에 들어가게 된다.
        요청값에 들어있기에 req.params.변수명 으로 출력이 가능.

        ※주의! 와일드카드엔 뭐든 다 들어가기때문에 반드시 해당 라우터는 코드 작성시에
                가장 아래쪽에 작성하던가 하자. 중간에 쓰면 와일드카드 있는 주소에 다 걸린다.(에러임)
        
        에러예시)
        예시요청주소 - http://localhost:3000/cat/user

        //상위코드 생략
        
        app.get('/cat/:name', (req,res) =>{
            console.log('아래 코드로 가야하지만 내가 위에 있기에 날 출력시킨다.');
        });

        // 요청주소는 여기지만, 오지 않는다!!! 위에 와일드카드에 부합하는 주소이기도 하기 때문!
        app.get('/cat/user', (req,res) =>{
            console.log('여기와야하는데.. 안옴');
        });

애스터리스크 (*) 주소요청
    app.get('*', (req,res) =>{
            console.log('전부 다 여기로 옴');
    });
    주소에 * 를 써주면 상위에 있는 요청주소를 못 탈시 나머지 주소를 모두 타게 함.

라우터 요청 후 res 객체를 잘못 썼을 경우
    app.get('/cat/user', (req,res) =>{
        res.sendFile(path.join(__dirname, 'index.html'));
        res.send('에러났습니당~');
        res.json('에러났습니당~');
    });
    
    sendFile, send, json, render(주소) 등의 것들은 반드시 한번만 줘야하는데 위 코드는 여러번 응답준거라 에러나온다.

morgan
    콘솔에 npm i morgan 입력하여 설치
    공통미들웨어로 써야하기에 상단에 app.use(morgan('dev')); 써줌
    app.use(morgan('dev')); // 개발시엔 이걸 보통 쓰고
    app.use(morgan('combined')); // 배포할땐 이걸 씀. 더 자세한 기록이 나온다. ip,시간,요청,브라우저 등등


cookie-parser
    express 에서 쿠키를 관리하기 편하게 해주는 모듈
    콘솔에 npm i cookie-parser 입력하여 설치
    공통미들웨어로 쿠키파서 사용선언
    app.use(cookieParser());
    
    app.get('/', (req,res) =>{
        console.log(req.cookies); 요청시 쿠키 있다면 자동으로 "키:값" 으로 저장되어있다.
    });

    쿠키 만들기. res.cookie(키,값, {옵션키:옵션값});
    app.get('/setCookie', (req,res) =>{
        let cookieName = 'mycookie';
        let expireDate = new Date( Date.now() + 60 * 60 * 1000 * 24 * 7);   //1주일
        res.cookie('cookieName', encodeURIComponent(cookieName), {
            expires: expireDate,    // 만료일
            httpOnly: true,         // 자바스크립트 공격 방어용
            path: '/',              // 쿠키 유효 주소 범위
        });
        console.log(req.cookies);
        res.sendFile(path.join(__dirname, 'index.html'));
    });

    쿠키 삭제 res.clearCookie(키,{옵션키:옵션값});
    // 아래의 경우 cookieName 이 키 인데, cookieKey객체에 key값이 cookieName 인 쿠키가 없으면 삭제 안함.
    app.get('/delCookie', (req,res) =>{
        let cookieKey = req.cookies;
        res.clearCookie('cookieName', encodeURIComponent(cookieKey), {
            httpOnly: true,         // 자바스크립트 공격 방어용
            path: '/',              // 쿠키 유효 주소 범위
        });
        if(req.cookies){
            console.log(req.cookies);
        }else{
            console.log('쿠키없음');
        }
        res.sendFile(path.join(__dirname, 'index.html'));
    });

bodyParser
    예전버전으로 쓰는것임. 요새는 express 자체에 bodyParser 가 들어있다고 함.
    사용하기 위해 공통미들웨어 선언
    app.use('bodyParser');

    app.use(express.json());    // A. 
    //클라이언트에서 json 데이터를 보내면 자동파싱 후 req.body 에 넣어둠.

    app.use(express.urlencoded({extended: true}));  // B.
    // 클라이언트에서 form형식의 submit 을 하면 파싱해서 req.body 에 넣어둠.
    // true 면 qs 라는 모듈을 쓰고, false 면 querystring 모듈을 쓴다. qs가 훨씬 강력하니 qs써라

    A와B는 세트이다. 대부분 필수로 쓰기에 그냥 써두면 된다.

    ex)
    app.get('/', (req,res) =>{
        req.body.클라이언트에서보내준값
    });

static 미들웨어
    Express 에서 제공하는 미들웨어. 정적파일 보내줄때 씀
    중간 경로를 추가해주는 역할을 함. 실제경로를 숨길 수 있음.(보안에 도움)
    app.use('요청 경로', express.static('실제경로'));

    예시)
    app.use('/', express.static(__dirname, 'public')); //선언
    예시요청주소 - localhost:3000/page.html
    실제경로는 localhost:3000/public/page.html 이다.
    따라서 실제경로인 public 경로는 숨기기 때문에 public 폴더 안에 page.html 파일이 있어야함.

express-session
    const session = require('express-session'); //선언

    // app.use(session({옵션키:옵션값})) - 세션설정
    app.use(session({
        resave: false, // 보통 false
        saveUnitialized: false, // 보통 false
        secret: 'secretKey' // 쿠키의 서명(암호화). 못 알아보게 바꿈
        cookie: {
            httpOnly: true,
        },
        name: 'connect.sid' // connect.sid는 기본값이라고 보자
    }));

    app.get('/', (req,res) =>{
        req.session // 해당 사용자에 대한 고유한 세션이 된다.
        req.session.id = 'myId'; // 요청을 보낸 사용자만의 아이디가 된다.
    });

미들웨어 사이 1회성 데이터 전달 방법
    req 객체에 변수를 만들어서 전달하기.

    app.get('/', (req,res,next) =>{
        req.myData = '1회성값';
        next('route');
    });

    app.get('/', (req,res) =>{
        console.log(req.myData);    // 1회성값 출력
    });

    res 객체로 한 번 전달을 완료하면 메모리를 정리하기 때문에 next()로 넘어간 라우터에서 출력가능.

미들웨어 확장법
    로그인해서 세션의 특정 변수에 값이 있을경우
    app.use('/', (req, res, next) => {  // 공통미들웨어지만 확장시켜서 사용
        if(req.session.id){
            express.static(__dirname,'public')(req, res, next)  // (req, res, next) 를 쓰는 것이 확장법임.
            // 로그인을 해서 session.id에 값이 있다면 app.get('/') 를 찾아갈것.
        }else{
            next();
        }
    });


multer
    이미지나 파일 보낼때 쓰는 모듈
    form 태그의 enctype이 multipart/form-data 인 경우엔 bodyParser로는 해석 불가능.
    이 때 multer가 필요

    const multer = require('multer'); //선언

    try {
        fs.readdirSync('uploads');
    } catch (error) {
        console.error('uploads 폴더가 없어 uploads 폴더를 생성합니다.');
        fs.mkdirSync('uploads');
    }
    const upload = multer({
        storage: multer.diskStorage({
            destination(req, file, done) {
                done(null, 'uploads/'); // 현재 폴더의 uploads 폴더에 저장할 것이다라고 명시. uploads폴더 필요함.
        },
        filename(req, file, done) {
            const ext = path.extname(file.originalname);
            done(null, path.basename(file.originalname, ext) + Date.now() + ext);
            // Date.now() 를 이름에 끼워넣은 이유는 파일명 중복 방지
            // null 은 에러처리 미들웨어로 넘길려면 error 를 넣어준다.
        },
    }),
        limits: { fileSize: 5 * 1024 * 1024 },
    });

    사용하기. 보통 특정 라우트에서만 발생하기 때문에 진자값으로 upload.single('name속성의 값') 을 장착해준다.
    ※ upload.single('name속성의 값') == 한개의 파일만 받을 때
    ※ upload.array('name속성의 값') == 여러개 파일 받을 때
    
    ※ upload.fields(배열객체) == 각기 다른 여러개 파일 받을 때?
    ex) 
    upload.fields([{ name:'image1' },{ name:'image2' },{ name:'image3' }])
    3번째 방식을 많이 쓸듯.

    // 딱 1개 올릴때
    app.post('/upload', upload.single('image'), (req, res) => {
        console.log(req.file);
        res.send('ok');
    });

    // 각기다른 여러개 파일 받을 때
    app.post('/upload', upload.fields([{ name:'image1' },{ name:'image2' },{ name:'image3' }]), (req, res) => {
        console.log(req.file);
        res.send('ok');
    });

    